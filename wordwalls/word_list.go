package wordwalls

// Interface with the django aerolith word list API.

type Question struct {
	Question string   `json:"q"`
	Answers  []string `json:"a"`
}

type WordList struct {
	ID int `json:"id"`

	Lexicon       string `json:"lexicon"`
	Temporary     bool   `json:"temporary"`
	QuestionIndex int    `json:"questionIndex"`

	NumCurAlphagrams int        `json:"numCurAlphagrams"`
	OrigQuestions    []Question `json:"origQuestions"`
	CurQuestions     []int      `json:"curQuestions"`
	NumQuestions     int        `json:"numAlphagrams"`
	Missed           []int      `json:"missed"`
	NumMissed        int        `json:"numMissed"`
	FirstMissed      []int      `json:"firstMissed"`
	NumFirstMissed   int        `json:"numFirstMissed"`

	Name         string `json:"name"`
	Version      int    `json:"version"`
	GoneThruOnce bool   `json:"goneThruOnce"`

	/*
	   This field is not strictly part of the word list, but it's the
	   current answer hash. It is generated by going through CurQuestions
	   (see generateAnswerHash)
	*/
	answerHash map[string]Answer
}

// Gets the next set of questions for this word list, and advances the
// pointer. Access to this word list is protected through the gamestates
// holder structure, so we don't need a mutex here.
func (w *WordList) nextSet(numQuestions int) []Question {
	qmin := w.QuestionIndex
	qmax := w.QuestionIndex + numQuestions
	questions := w.CurQuestions[qmin:qmax]
	w.QuestionIndex += numQuestions
	return w.generateQuestions(questions)
}

// Generate a set of Questions from the given questionIndices.
func (w *WordList) generateQuestions(questionIndices []int) []Question {
	questions := make([]Question, len(questionIndices))
	for i, qidx := range questionIndices {
		questions[i] = w.OrigQuestions[qidx]
	}
	w.generateAnswerHash(questions)
	return questions
}

// Generate answer hash and save it directly to w.answerHashes.
func (w *WordList) generateAnswerHash(questions []Question) {
	w.answerHash = make(map[string]Answer)
	for qidx, q := range questions {
		for _, word := range q.Answers {
			answer := Answer{Alphagram: q.Question, Idx: qidx}
			w.answerHash[word] = answer
		}
	}
}

/**
 * {"lexicon": "America", "temporary": true, "questionIndex": 0,
 * "numCurAlphagrams": 50, "origQuestions": [{"q": "BEEQSSTU", "a":
 * ["BEQUESTS"]}, {"q": "CDEELNTY", "a": ["DECENTLY"]}, {"q":
 * "EKMOOSTU", "a": ["OUTSMOKE"]}, {"q": "CGHIMNOU", "a": ["MOUCHING"]},
 * {"q": "CFLLOORU", "a": ["COLORFUL"]}, {"q": "DELOPPST", "a":
 * ["STOPPLED"]}, {"q": "ACMQSTUU", "a": ["CUMQUATS"]}, {"q":
 * "DEEHIMMS", "a": ["IMMESHED"]}, {"q": "AFFFFIRR", "a": ["RIFFRAFF"]},
 * {"q": "ACKNSSTU", "a": ["UNSTACKS"]}, {"q": "AGIMNORS", "a":
 * ["ORGANISM", "ROAMINGS"]}, {"q": "ADEEHLRT", "a": ["HALTERED",
 * "LATHERED"]}, {"q": "AABCKRRS", "a": ["BARRACKS"]}, {"q": "DEIIMSVW",
 * "a": ["MIDWIVES"]}, {"q": "EEIKPPRR", "a": ["KIPPERER"]}, {"q":
 * "ADEEESSW", "a": ["SEAWEEDS", "SEESAWED"]}, {"q": "CEIMNOPY", "a":
 * ["EPONYMIC"]}, {"q": "EEIIRSTV", "a": ["VERITIES"]}, {"q":
 * "ACEILMOS", "a": ["CAMISOLE"]}, {"q": "ABEIKLLY", "a": ["LIKEABLY"]},
 * {"q": "AEHINORT", "a": ["ANTIHERO"]}, {"q": "EEENPSSX", "a":
 * ["EXPENSES"]}, {"q": "AGHIMMNS", "a": ["SHAMMING"]}, {"q":
 * "EEIIRRSV", "a": ["RIVIERES"]}, {"q": "EFLRTTUY", "a": ["FLUTTERY"]},
 * {"q": "CEHNRRSU", "a": ["CHURNERS"]}, {"q": "GIINNOQU", "a":
 * ["QUOINING"]}, {"q": "ADEIKNPR", "a": ["KIDNAPER"]}, {"q":
 * "CEEHNRST", "a": ["TRENCHES"]}, {"q": "EHHIORTT", "a": ["HITHERTO"]},
 * {"q": "AELLNOPV", "a": ["VOLPLANE"]}, {"q": "EEFNRTTU", "a":
 * ["UNFETTER"]}, {"q": "ADEFGILN", "a": ["FINAGLED"]}, {"q":
 * "AEHPRSUY", "a": ["EUPHRASY"]}, {"q": "AAGHILRS", "a": ["GHARIALS"]},
 * {"q": "ABHLLMOT", "a": ["MOTHBALL"]}, {"q": "CGIMNOPU", "a":
 * ["UPCOMING"]}, {"q": "DDEEEIRT", "a": ["REEDITED"]}, {"q":
 * "ABDEGILN", "a": ["BLINDAGE"]}, {"q": "AAEERSSW", "a": ["SEAWARES"]},
 * {"q": "ACEHHISU", "a": ["HUISACHE"]}, {"q": "EFIMORST", "a":
 * ["SETIFORM"]}, {"q": "FIILOSST", "a": ["FOILISTS"]}, {"q":
 * "CDEKNSSU", "a": ["SUNDECKS"]}, {"q": "AILNQSTU", "a": ["QUINTALS"]},
 * {"q": "AEHIMPRT", "a": ["TERAPHIM"]}, {"q": "ABDNORUY", "a":
 * ["BOUNDARY"]}, {"q": "AAAIIMNP", "a": ["APIMANIA"]}, {"q":
 * "EGNOPPRU", "a": ["OPPUGNER"]}, {"q": "EGGHISTU", "a":
 * ["HUGGIEST"]}], "numMissed": 0, "id": 22447, "missed": [],
 * "curQuestions": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
 * 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
 * 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
 * 49], "numAlphagrams": 50, "numFirstMissed": 0, "name":
 * "8238318a73a64254be53169255a8d668", "version": 2, "goneThruOnce":
 * false, "firstMissed": []}
 */
